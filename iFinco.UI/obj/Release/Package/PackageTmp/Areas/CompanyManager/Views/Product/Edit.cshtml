@model iFinco.UI.Models.ProductVM
@{
    ViewBag.Title = "Product Management";
    int i = 0;
}
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header" data-background-color="purple">
                        <h4 class="title">Edit Products</h4>
                        <p class="category"></p>
                    </div>
                    <div class="card-content">
                        @using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { id = "contact-for", enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="col-md-6">
                                        <div class="form-group label-floating">
                                            @Html.LabelFor(x => x.Product.Title, new { @class = "contor-label" })
                                            @Html.HiddenFor(x => x.Product.Id)
                                            @Html.TextBoxFor(x => x.Product.Title, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(x => x.Product.Title)
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group label-floating">
                                            @Html.LabelFor(x => x.Product.Tags, new { @class = "contor-label" })
                                            <br />
                                            @Html.TextBoxFor(x => x.Product.Tags, new { @class = "form-control", data_role = "tagsinput" })
                                            @Html.ValidationMessageFor(x => x.Product.Tags)
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group label-floating">
                                                @Html.LabelFor(x => x.Product.Description, new { @class = "contor-label" })
                                                @Html.TextBoxFor(x => x.Product.Description, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(x => x.Product.Description)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <h4 style="margin-bottom:30px">Image</h4>
                                        @if (string.IsNullOrEmpty(Model.Product.ImageUrl))
                                        {
                                            <img class="logo-preview" src="~/PanalAssets/img/noImage.png" style="height:200px;width:200px" />
                                            @*<img class="logo-preview" src="" style="height:100px;width:100px" />*@
                                        }
                                        else
                                        {
                                            <img class="logo-preview" src="@Url.Content(Model.Product.ImageUrl)" style="height:200px;width:200px" />
                                        }


                                        @*<img class="logo-preview" src="" style="height:200px;width:200px" />*@
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3 ">
                                        <div class="form-group label-floating">
                                            @Html.LabelFor(x => x.Product.CategoryId, new { @class = "contor-label" })
                                            @Html.DropDownListFor(x => x.Product.CategoryId, new SelectList(ViewBag.Categories, "Id", "Title"), "Select Category", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(x => x.Product.CategoryId)
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group label-floating">
                                            @Html.LabelFor(x => x.Product.HaveVarients, new { @class = "contor-label" })<br />
                                            @Html.CheckBoxFor(x => x.Product.HaveVarients, new { @class = "form-control switch" })
                                            @Html.ValidationMessageFor(x => x.Product.HaveVarients)
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group label-floating">
                                            @Html.LabelFor(x => x.Product.HasExpiry, new { @class = "contor-label" })<br />
                                            @Html.CheckBoxFor(x => x.Product.HasExpiry, new { @class = "form-control switch" })
                                            @Html.ValidationMessageFor(x => x.Product.HasExpiry)
                                        </div>
                                    </div>
                                    <div class="col-md-3 var-holdr" @(Model.Product.HaveVarients ? "" : "style=display:none")>
                                        <div class="form-group label-floating">
                                            @Html.Label("Variants", new { @class = "contor-label" })
                                            @Html.DropDownList("Variants", new SelectList(ViewBag.Variants, "Id", "Title"), "Select Variant", new { @class = "form-control" })
                                            @Html.ValidationMessageFor(x => x.ProductVariant[0].VariantId)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row var-holdr" @(Model.Product.HaveVarients ? "" : "style=display:none")>
                                <h5>Selected Variants</h5>
                                <div class="col-md-12" id="lblVar">
                                    @foreach (var item in Model.ProductVariant)
                                    {
                                        if (item.IsActive)
                                        {
                                            <div class="col-md-2 Var">
                                                @Html.HiddenFor(x => x.ProductVariant[i].VariantId, new { @class = "hdnvar" })
                                                @Html.HiddenFor(x => x.ProductVariant[i].Id, new { @class = "hdnId" })
                                                <label style="margin-right:10px;"> @item.Variant.Title</label>
                                                <a href="#" class="material-icons btnDel">remove_circle</a>
                                            </div>
                                        }
                                        i++;
                                    }
                                </div>
                            </div>
                            <div class="text-right">
                                <input type="file" name="logo" style="display:none" data-btn=".btn-logo" data-name="#logoName" data-preview=".logo-preview" class="vns-file" />
                                <span id="logoName"></span>
                                <a href="@Url.Action("Index","Product")" class="btn btn-default pull-right btn-md">Cancle</a>
                                <button type="button" class="btn-primary submit-btn btn btn-logo">Upload Logo</button>
                                <button type="submit" class="btn btn-primary pull-right">Update</button>
                            </div>
                            <div class="clearfix"></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" class="active-nav" value="#Product" />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/common/fileuploader.js"></script>
    <script type="text/javascript">
        var count = 0;
        $.validator.setDefaults({ ignore: null });
        $('.vns-file').VNSFileUploder();
        $('input[name="Product.HaveVarients"]').on('switchChange.bootstrapSwitch', function (event, state) {
            $('.var-holdr').toggle(state);
            if (!state) {
                var allVarints = $('.Var');
                for (var i = 0; i < allVarints.length; i++) {
                    var val = allVarints[i];
                    $('#Variants').append('<option value=' + $(val).find('.hdnvar').val() + '>' + $(val).find('label').html() + '</option>');
                    $(val).remove();
                }
            }
        });

        function RemoveAlreadySelectedItems() {
            var varantVal = $('.hdnvar');
            for (var i = 0; i < varantVal.length; i++) {
                $('#Variants option[value=' + $(varantVal[i]).val() + ']').remove();
            }
        }

        RemoveAlreadySelectedItems();

        //call event on dropdown_index_changed
        $('#Variants').change(function () {
            var id = $(this).val();
            var txt = $("#Variants option:selected").text();
            if (id) {
                $("#Variants option:selected").remove();
                var txtHmtl = '<div class="col-md-2 Var"><input class="hdnvar" data-val="true" data-val-number="The field VariantId must be a number." data-val-required="The VariantId field is required." id="ProductVariant_0__VariantId" name="ProductVariant[0].VariantId" type="hidden" value="" /><label style="margin-right:10px;"> ' + txt + ' </label><a href="#" class="material-icons btnDel">remove_circle</a></div>'
                var hd = $(txtHmtl).find('.hdnvar');
                $('#lblVar').append(txtHmtl);
                $('.Var').last().find('.hdnvar').val(id);
                ReName();
                count++;
            }
        })

        function ReName() {
            var txtboxes = $('.hdnvar');
            for (var i = 0; i < txtboxes.length; i++) {
                $(txtboxes[i]).attr('name', 'ProductVariant[' + i + '].VariantId')
            }
            //ReSetValidation();
        }

        //changing the attribute of dynamic created txtboxes
        $(document).on('click', '.btnDel', function () {
            var val = $(this).closest('.Var');
            $('#Variants').append('<option value=' + $(val).find('.hdnvar').val() + '>' + $(val).find('label').html() + '</option>');
            var cln = $(this).closest('.Var').remove();
            ReName();
            count--;
        });
    </script>
}